name: Update Helm Chart Version

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - labeled
      - reopened
      - synchronize

env:
  # terraform-planner-service user in master account owns these keys
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  check-pr-title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: update file permission
        run: chmod +x ./.github/scripts/*

      - name: fetch environment and service from pull request title
        id: check-pr-title
        run: ./.github/scripts/check-pr-title.sh "${{ github.event.pull_request.title }}"

  changed-files-job:
    needs: [check-pr-title]
    if: needs.check-pr-title.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_files }}
      silo: ${{ steps.fetch-silo-env-names.outputs.silo }}
      environment: ${{ steps.fetch-silo-env-names.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: tj-actions/changed-files@v40
        id: changed-files
        with:
          escape_json: false
          dir_names: true
          dir_names_max_depth: 2
          files: charts/**
          json: true
          quotepath: false

      - name: List all changed files
        run: echo '${{ steps.changed-files.outputs.all_changed_files }}'

      - name: update file permission
        run: chmod +x ./.github/scripts/*

      - name: fetch environment and service from pull request title
        id: fetch-silo-env-names
        run: ./.github/scripts/fetch-pr-title.sh "${{ github.event.pull_request.title }}"

  matrix-job:
    needs: [check-pr-title, changed-files-job]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        files: ${{ fromJSON(needs.changed-files-job.outputs.matrix) }}
      fail-fast: false
    permissions: write-all
    env:
      silo: ${{ needs.changed-files-job.outputs.silo }}
      environment: ${{ needs.changed-files-job.outputs.environment }}
    environment: ${{ needs.changed-files-job.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-skip-session-tagging: true # don't tag session - LZA doesn't deploy the trust relationship configs for this

      - name: Set up Helm
        uses: azure/setup-helm@v3.5

      - name: Install helm s3 plugin
        run: |
          helm plugin install https://github.com/hypnoglow/helm-s3.git
          helm repo add service-helm-charts s3://service-helm-charts

      - name: set environment value
        run: |
          value=$(echo "${{ matrix.files }}" | cut -d"/" -f2)
          echo "Value: $value"
          echo "service=$value" >> "$GITHUB_ENV"

      - name: update file permission
        run: chmod +x ./.github/scripts/*

      - name: run update version script
        id: updated-version-script
        if: contains(github.event.pull_request.labels.*.name, 'bug')
        run: |
          ./.github/scripts/update-version.sh  ${{ matrix.files }}

      - name: install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: run helm chart lint command
        working-directory: ${{ matrix.files }}
        run: helm lint

      - name: run helm chart template command
        working-directory: ${{ matrix.files }}
        run: helm template ./ -f values.yaml > ../../${{ env.service }}-chart.txt

      - name: run aws eks credentials command
        run: aws eks update-kubeconfig --region us-east-1 --name eks-01

      - name: run helm chart template dry run command
        working-directory: ${{ matrix.files }}
        run: helm template ./ -f values.yaml | kubectl apply --dry-run=server -f -

      - uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: true
          message: |
            Helm chart for service ${{ env.service }} will be updated to version ${{ env.new_version}} for ${{ env.silo }} silo in ${{ env.environment }} environment.

      - name: update helm chart verison
        working-directory: ${{ matrix.files }}
        if: contains(github.event.pull_request.labels.*.name, 'bug')
        run: yq e ".version = \"${{ env.new_version }}\"" -i Chart.yaml

      - name: Update Helm dependencies
        working-directory: ${{ matrix.files }}
        run: helm dependency update ./

      - name: Package Helm chart
        working-directory: ${{ matrix.files }}
        run: helm package ./

      - name: Push Helm chart to S3
        run: |
          bucket_name="service-helm-charts"
          file_key="${{ env.service }}-${{ env.new_version }}.tgz" 
          if aws s3api list-objects --bucket "$bucket_name" --prefix "$file_key" | grep -q "$file_key"; then
            echo "File exists in the bucket."
          else
            echo "line 138"
            helm s3 push ./${{ matrix.files }}/${{ env.service }}-${{ env.new_version }}.tgz service-helm-charts
            echo "File does not exist in the bucket."
          fi

      - name: update targetRevision for helm chart
        working-directory: ./environments/${{ env.silo }}/${{ env.environment }}
        run: yq e 'select(.kind == "Application" and .metadata.name == "${{ env.silo }}-${{ env.environment }}-${{ env.service }}").spec.sources[0].targetRevision = "${{ env.new_version }}"' -i applications.yaml

      - uses: mshick/add-pr-comment@v2
        with:
          allow-repeats: true
          message-path: |
            ./${{ env.service }}-chart.txt
